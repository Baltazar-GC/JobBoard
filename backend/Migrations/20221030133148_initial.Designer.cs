// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Contexts;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationUtnContext))]
    [Migration("20221030133148_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("backend.Entities.ApplicationHired", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("HiredEmployeeOfferId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InternshipOfferId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HiredEmployeeOfferId");

                    b.HasIndex("InternshipOfferId");

                    b.HasIndex("StudentId");

                    b.ToTable("HiredApplications");
                });

            modelBuilder.Entity("backend.Entities.ApplicationInternship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InternshipOfferId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InternshipOfferId");

                    b.HasIndex("StudentId");

                    b.ToTable("InternshipApplications");
                });

            modelBuilder.Entity("backend.Entities.BusinessContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAnEmployee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryPhone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.ToTable("BusinessesContacts");
                });

            modelBuilder.Entity("backend.Entities.BusinessInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LegalAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOfBusiness")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Web")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.ToTable("BusinessesInformation");
                });

            modelBuilder.Entity("backend.Entities.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DegreeLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("backend.Entities.HiredEmployeeOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DegreeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailReceiver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionsToFill")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("EmployerId");

                    b.ToTable("HiredEmployeeOffers");
                });

            modelBuilder.Entity("backend.Entities.InternshipOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DegreeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailReceiver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAnAgreement")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthsOfDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionsToFill")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("EmployerId");

                    b.ToTable("InternshipOffers");
                });

            modelBuilder.Entity("backend.Entities.OtherSkills", b =>
                {
                    b.Property<int>("OtherSkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TechnologyLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TechnologyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OtherSkillsId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TechnologyLevelId");

                    b.ToTable("OtherSkills");
                });

            modelBuilder.Entity("backend.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnologyLevelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SkillId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("TechnologyLevelId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("backend.Entities.StudentCollegeInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApprovedSubjects")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageWithApproved")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageWithNotApproved")
                        .HasColumnType("REAL");

                    b.Property<int>("CollegeYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DegreeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearOfStudyPlan")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentsCollegeInformation");
                });

            modelBuilder.Entity("backend.Entities.StudentExtraData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Curriculum")
                        .HasColumnType("BLOB");

                    b.Property<string>("HighSchoolDegree")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentsExtraData");
                });

            modelBuilder.Entity("backend.Entities.StudentPersonalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentHomeNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateOfBith")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyCountry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyNumberHome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyPhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyProvince")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FloorNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdentifierType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndentifierNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Legajo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryFamilyPhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondaryPhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentsPersonalInformation");
                });

            modelBuilder.Entity("backend.Entities.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TechnologyId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("backend.Entities.TechnologyLevel", b =>
                {
                    b.Property<int>("TechnologyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TechnologyLevelId");

                    b.ToTable("TechnologyLevels");
                });

            modelBuilder.Entity("backend.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "272cf1fd-6e8b-4bdb-87b8-b136033fad9e",
                            AccessFailedCount = 0,
                            City = "",
                            ConcurrencyStamp = "94294faa-f048-4f58-b1cb-11ff9997d826",
                            Email = "student@frro.utn.edu.ar",
                            EmailConfirmed = true,
                            FirstName = "Carlos",
                            LastName = "Perez",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@FRRO.UTN.EDU.AR",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEErpsWOAkoMypaIrEs1g6i/Bp+rfT3TAaSqaBoT3KbhB4CXyqcuKagnmHg5uyL3+NQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "123789a4-3632-4b40-b526-a7b5e75b7d7c",
                            TwoFactorEnabled = false,
                            UserName = "student1"
                        },
                        new
                        {
                            Id = "bdc961f7-6fb6-4b7e-9319-c35a8b09dd36",
                            AccessFailedCount = 0,
                            City = "",
                            ConcurrencyStamp = "05fd21bb-9b7c-40eb-a430-035be1d01132",
                            Email = "employer@frro.utn.edu.ar",
                            EmailConfirmed = true,
                            FirstName = "Mercado Libre",
                            LastName = "Argentina",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYER@FRRO.UTN.EDU.AR",
                            NormalizedUserName = "EMPLOYER1",
                            PasswordHash = "AQAAAAEAACcQAAAAENbSkhK1/PcuOwU0f6we8Bf6YBAbiBoZr7urhB/vmDLbbTvdfo6UGTnAGlBOJif2rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a1dd316-798d-4f2f-beb5-008bb7dade38",
                            TwoFactorEnabled = false,
                            UserName = "employer1"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            City = "",
                            ConcurrencyStamp = "260fba02-339e-4827-8ebd-830f239c844d",
                            Email = "admin@frro.utn.edu.ar",
                            EmailConfirmed = true,
                            FirstName = "administracion",
                            LastName = "UTN",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FRRO.UTN.EDU.AR",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQAAAAEAACcQAAAAEPBzyUMY5eXVWblJb7Qp8CwWJ2+25Vqe72E/o7ilAW50WPo/BRFYtHcmrKZe3w9bew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75a18479-240c-440e-83a3-6704fb1df07b",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "601f0ede-374e-45f0-9373-50cba7a8183e",
                            ConcurrencyStamp = "601f0ede-374e-45f0-9373-50cba7a8183e",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "886bad89-d81f-4c6d-8c98-e3ba074c23dd",
                            ConcurrencyStamp = "886bad89-d81f-4c6d-8c98-e3ba074c23dd",
                            Name = "Employer",
                            NormalizedName = "EMPLOYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "272cf1fd-6e8b-4bdb-87b8-b136033fad9e",
                            RoleId = "601f0ede-374e-45f0-9373-50cba7a8183e"
                        },
                        new
                        {
                            UserId = "bdc961f7-6fb6-4b7e-9319-c35a8b09dd36",
                            RoleId = "886bad89-d81f-4c6d-8c98-e3ba074c23dd"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backend.Entities.Admin", b =>
                {
                    b.HasBaseType("backend.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("backend.Entities.Employer", b =>
                {
                    b.HasBaseType("backend.Entities.User");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Employer");
                });

            modelBuilder.Entity("backend.Entities.Student", b =>
                {
                    b.HasBaseType("backend.Entities.User");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("backend.Entities.ApplicationHired", b =>
                {
                    b.HasOne("backend.Entities.HiredEmployeeOffer", "HiredEmployeeOffer")
                        .WithMany()
                        .HasForeignKey("HiredEmployeeOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.InternshipOffer", null)
                        .WithMany("HiredApplications")
                        .HasForeignKey("InternshipOfferId");

                    b.HasOne("backend.Entities.Student", "Student")
                        .WithMany("HiredApplications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HiredEmployeeOffer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("backend.Entities.ApplicationInternship", b =>
                {
                    b.HasOne("backend.Entities.InternshipOffer", "InternshipOffer")
                        .WithMany("InternshipApplications")
                        .HasForeignKey("InternshipOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Student", "Student")
                        .WithMany("InternshipApplications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternshipOffer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("backend.Entities.BusinessContact", b =>
                {
                    b.HasOne("backend.Entities.Employer", "Employer")
                        .WithOne("BusinessContact")
                        .HasForeignKey("backend.Entities.BusinessContact", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("backend.Entities.BusinessInformation", b =>
                {
                    b.HasOne("backend.Entities.Employer", "Employer")
                        .WithOne("BusinessInformation")
                        .HasForeignKey("backend.Entities.BusinessInformation", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("backend.Entities.HiredEmployeeOffer", b =>
                {
                    b.HasOne("backend.Entities.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Employer", "Employer")
                        .WithMany("HiredEmployeeOffers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("backend.Entities.InternshipOffer", b =>
                {
                    b.HasOne("backend.Entities.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Employer", "Employer")
                        .WithMany("InternshipOffers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("backend.Entities.OtherSkills", b =>
                {
                    b.HasOne("backend.Entities.Student", "Student")
                        .WithMany("OtherSkills")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.TechnologyLevel", "TechnologyLevel")
                        .WithMany()
                        .HasForeignKey("TechnologyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("TechnologyLevel");
                });

            modelBuilder.Entity("backend.Entities.Skill", b =>
                {
                    b.HasOne("backend.Entities.Student", "Student")
                        .WithMany("Skills")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Technology", "Technology")
                        .WithMany("Skills")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.TechnologyLevel", "TechnologyLevel")
                        .WithMany()
                        .HasForeignKey("TechnologyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Technology");

                    b.Navigation("TechnologyLevel");
                });

            modelBuilder.Entity("backend.Entities.StudentCollegeInformation", b =>
                {
                    b.HasOne("backend.Entities.Degree", "Degree")
                        .WithMany("StudentsCollegeInformation")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Student", "Student")
                        .WithOne("StudentCollegeInformation")
                        .HasForeignKey("backend.Entities.StudentCollegeInformation", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("backend.Entities.StudentExtraData", b =>
                {
                    b.HasOne("backend.Entities.Student", "Student")
                        .WithOne("StudentExtraData")
                        .HasForeignKey("backend.Entities.StudentExtraData", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("backend.Entities.StudentPersonalInformation", b =>
                {
                    b.HasOne("backend.Entities.Student", "Student")
                        .WithOne("StudentPersonalInformation")
                        .HasForeignKey("backend.Entities.StudentPersonalInformation", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Entities.Degree", b =>
                {
                    b.Navigation("StudentsCollegeInformation");
                });

            modelBuilder.Entity("backend.Entities.InternshipOffer", b =>
                {
                    b.Navigation("HiredApplications");

                    b.Navigation("InternshipApplications");
                });

            modelBuilder.Entity("backend.Entities.Technology", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("backend.Entities.Employer", b =>
                {
                    b.Navigation("BusinessContact")
                        .IsRequired();

                    b.Navigation("BusinessInformation")
                        .IsRequired();

                    b.Navigation("HiredEmployeeOffers");

                    b.Navigation("InternshipOffers");
                });

            modelBuilder.Entity("backend.Entities.Student", b =>
                {
                    b.Navigation("HiredApplications");

                    b.Navigation("InternshipApplications");

                    b.Navigation("OtherSkills");

                    b.Navigation("Skills");

                    b.Navigation("StudentCollegeInformation")
                        .IsRequired();

                    b.Navigation("StudentExtraData")
                        .IsRequired();

                    b.Navigation("StudentPersonalInformation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
